<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta
        http-equiv="X-UA-Compatible"
        content="IE=edge"
    >
    <meta
        name="viewport"
        content="width=device-width, initial-scale=1.0"
    >
    <title>Agile Scrum Master Game - Free Online Collaborative Tool</title>
    <meta
        name="description"
        content="Engage in interactive, fun, and effective Scrum planning with our free online Agile Scrum Master Game. Perfect for remote teams, this tool simplifies your Agile estimation and planning process."
    >
    <meta
        name="keywords"
        content="Scrum Game, Agile Planning Tool, Free Scrum Master Game, Online Estimation Tool, Agile Project Management, Scrum Planning Poker, Agile Collaboration Tool"
    >
    <meta
        name="author"
        content="Hakan SARIER"
    >

    <!-- Open Graph / Facebook -->
    <meta
        property="og:type"
        content="website"
    >
    <meta
        property="og:url"
        content="https://scrum-oiyf.onrender.com/"
    >
    <meta
        property="og:title"
        content="Agile Scrum Master Game - Free Online Collaborative Tool"
    >
    <meta
        property="og:description"
        content="Interactive and engaging Scrum planning tool for Agile teams. Simplify your estimation process with our free online game."
    >
    <!-- <meta property="og:image" content="https://scrum-oiyf.onrender.com/image.jpg"> -->

    <!-- Twitter -->
    <meta
        property="twitter:card"
        content="summary_large_image"
    >
    <meta
        property="twitter:url"
        content="https://scrum-oiyf.onrender.com/"
    >
    <meta
        property="twitter:title"
        content="Agile Scrum Master Game - Free Online Collaborative Tool"
    >
    <meta
        property="twitter:description"
        content="Interactive and engaging Scrum planning tool for Agile teams. Simplify your estimation process with our free online game."
    >
    <!-- <meta property="twitter:image" content="https://scrum-oiyf.onrender.com/image.jpg"> -->

    <!-- Favicon -->
    <link
        rel="icon"
        type="image/x-icon"
        href="favicon.png"
    >
    <link
        rel="stylesheet"
        href="index.css"
    >
    <script src="/socket.io/socket.io.js"></script>
    <script>

        let socket = io.connect('/');
        let currentRoom;
        let isMaster = false;
        let userName = '';
        const SESSION_DURATION = 6 * 60 * 60 * 1000; // 6 saat

        // LocalStorage'dan session bilgilerini al
        function loadSession() {
            try {
                const sessionData = localStorage.getItem('scrumSession');
                if (sessionData) {
                    const session = JSON.parse(sessionData);
                    const now = Date.now();

                    // 6 saat içindeyse otomatik geri katıl
                    if (now - session.timestamp < SESSION_DURATION) {
                        document.getElementById('username').value = session.name;
                        document.getElementById('room').value = session.room;
                        document.getElementById('isMaster').checked = session.isMaster;
                        return session;
                    } else {
                        // Session süresi dolmuş, temizle
                        localStorage.removeItem('scrumSession');
                    }
                }
            } catch (e) {
                console.error('Session yükleme hatası:', e);
            }
            return null;
        }

        // Session bilgilerini kaydet
        function saveSession(room, name, isMaster) {
            try {
                const sessionData = {
                    room: room,
                    name: name,
                    isMaster: isMaster,
                    timestamp: Date.now()
                };
                localStorage.setItem('scrumSession', JSON.stringify(sessionData));
            } catch (e) {
                console.error('Session kaydetme hatası:', e);
            }
        }

        // Update connection status indicator
        function updateConnectionStatus(status) {
            const statusElement = document.getElementById('connectionStatus');
            if (!statusElement) return;

            if (status === 'connected') {
                statusElement.className = 'status-connected';
                statusElement.innerHTML = '🟢 Connected';
            } else if (status === 'reconnecting') {
                statusElement.className = 'status-reconnecting';
                statusElement.innerHTML = '🟡 Reconnecting...';
            } else if (status === 'disconnected') {
                statusElement.className = 'status-disconnected';
                statusElement.innerHTML = '🔴 Disconnected';
            }
        }

        // Otomatik yeniden bağlanma
        socket.on('disconnect', (reason) => {
            console.log('Bağlantı koptu:', reason);

            // Only update connection status if user is in a room
            if (currentRoom) {
                updateConnectionStatus('disconnected');
            }

            // Away durumunu otomatik ayarla
            if (currentRoom) {
                socket.emit('autoAway', { room: currentRoom, isAway: true });
            }

            // Birkaç saniye sonra yeniden bağlanma durumunu göster
            setTimeout(() => {
                if (!socket.connected && currentRoom) {
                    updateConnectionStatus('reconnecting');
                }
            }, 1000);
        });

        socket.on('connect', () => {
            console.log('Bağlantı kuruldu');

            // Only update connection status if user is in a room
            if (currentRoom) {
                updateConnectionStatus('connected');
            }

            // Away durumunu kaldır
            if (currentRoom) {
                socket.emit('autoAway', { room: currentRoom, isAway: false });
            }

            // Eğer daha önce bir odaya katıldıysa, otomatik geri katıl
            const session = loadSession();
            if (session && currentRoom) {
                console.log('Otomatik olarak odaya geri katılınıyor...');
                socket.emit('joinRoom', {
                    room: currentRoom,
                    name: userName,
                    isMaster: isMaster
                });
            }
        });

        socket.on('connect_error', (error) => {
            console.error('Bağlantı hatası:', error);

            // Only update connection status if user is in a room
            if (currentRoom) {
                updateConnectionStatus('reconnecting');
            }
        });

        // Sayfa yüklendiğinde eski session'ı kontrol et
        window.addEventListener('load', () => {
            const session = loadSession();
            if (session) {
                console.log('Önceki session bulundu');
            }
        });

        // Recommended room selection
        function selectRoom(roomName) {
            document.getElementById('room').value = roomName;
        }

        // Toggle What's New modal
        function toggleWhatsNew() {
            const modal = document.getElementById('whatsNewModal');
            if (modal.style.display === 'flex') {
                modal.style.display = 'none';
            } else {
                modal.style.display = 'flex';
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('whatsNewModal');
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        }

        function joinRoom() {
            let name = document.getElementById('username').value;
            let room = document.getElementById('room').value;
            isMaster = document.getElementById('isMaster').checked;

            if (name && room) {
                currentRoom = room;
                userName = name;

                // Session bilgilerini kaydet
                saveSession(room, name, isMaster);

                socket.emit('joinRoom', { room: currentRoom, name: name, isMaster: isMaster });

                if (isMaster) {

                    document.getElementsByClassName('section-master')[0].classList.remove('d-none');
                    document.getElementById('revealBtn').style.display = 'block';
                    document.getElementById('resetBtn').style.display = 'block'; // Yeniden Başlat butonunu göster
                }

                document.getElementById('joinSection').style.display = 'none';
                document.getElementById('gameSection').classList.remove('d-none');
                document.getElementById('countInfo').classList.remove('d-none');
                document.getElementById('connectionStatus').classList.remove('d-none');

                // Hide What's New button when entering room
                document.getElementById('whatsNewButton').style.display = 'none';

            } else {
                alert('ismini ve bağlanmak istediğin odayı gir.');
            }
        }

        socket.on('updateUsers', function (users) {
            let userList = '';
            let userCount = Object.keys(users).length;

            // Sort users: master first, then others
            const sortedUsers = Object.values(users).sort((a, b) => {
                if (a.isMaster) return -1;
                if (b.isMaster) return 1;
                return 0;
            });

            sortedUsers.forEach((user) => {
                const breakClass = user.requestBreak ? 'has-break-request' : '';
                const questionClass = user.hasQuestion ? 'has-question' : '';
                const awayClass = user.isAway ? 'is-away' : '';
                const masterClass = user.isMaster ? 'is-master' : '';
                const voteDisplay = user.isMaster ? 'Voted' : (user.isAway ? 'Away 💻' : (user.vote !== null ? 'Voted' : 'Not voted'));
                const masterBadge = user.isMaster ? ' 👑' : '';
                userList += `
            <div class="userCard ${user.vote !== null || user.isMaster ? 'voted' : ''} ${breakClass} ${questionClass} ${awayClass} ${masterClass}">
                <h3>${user.name}${masterBadge}</h3>
                <p>${voteDisplay}</p>
            </div>
        `;
            });

            document.getElementById("users").innerHTML = userList;
            document.getElementById("userCount").innerText = `Participants: ${userCount}`;
        });



        socket.on('updateVotes', function (users, voters) {

            let userList = '';

            // Sort users: master first, then others
            const sortedUsers = Object.values(users).sort((a, b) => {
                if (a.isMaster) return -1;
                if (b.isMaster) return 1;
                return 0;
            });

            sortedUsers.forEach((user) => {
                const breakClass = user.requestBreak ? 'has-break-request' : '';
                const questionClass = user.hasQuestion ? 'has-question' : '';
                const awayClass = user.isAway ? 'is-away' : '';
                const masterClass = user.isMaster ? 'is-master' : '';
                // Master always shows emoji
                const voteDisplay = user.isMaster ? '🥺' : (user.isAway ? 'Away 💻' : (user.vote !== null && user.vote !== 'null' ? user.vote : '🥺'));
                const masterBadge = user.isMaster ? ' 👑' : '';
                userList += `
            <div class="userCard ${user.vote !== null || user.isMaster ? 'voted' : ''} ${breakClass} ${questionClass} ${awayClass} ${masterClass}">
                <h3>${user.name}${masterBadge} ${user.isWinner ? '🏆' : ''}</h3>
                <p>${voteDisplay}</p>
            </div>
        `;
            });

            document.getElementById("users").innerHTML = userList;
            // document.getElementById("averageVote").innerText = averageVote;
            document.getElementById("voters").innerText = voters;
        });

        socket.on('pulseDetected', function () {
            console.log('pulseDetected');
        });

        socket.on('votesReset', function (users) {
            let userList = '';

            // Sort users: master first, then others
            const sortedUsers = Object.values(users).sort((a, b) => {
                if (a.isMaster) return -1;
                if (b.isMaster) return 1;
                return 0;
            });

            sortedUsers.forEach((user) => {
                const breakClass = user.requestBreak ? 'has-break-request' : '';
                const questionClass = user.hasQuestion ? 'has-question' : '';
                const awayClass = user.isAway ? 'is-away' : '';
                const masterClass = user.isMaster ? 'is-master' : '';
                const voteDisplay = user.isMaster ? 'Voted' : (user.isAway ? 'Away 💻' : 'Not voted');
                const masterBadge = user.isMaster ? ' 👑' : '';
                userList += `
            <div class="userCard ${user.isMaster ? 'voted' : ''} ${breakClass} ${questionClass} ${awayClass} ${masterClass}">
                <h3>${user.name}${masterBadge}</h3>
                <p>${voteDisplay}</p>
            </div>
        `;
            });

            document.getElementById("users").innerHTML = userList;
            // document.getElementById("averageVote").innerText = '-';
            document.getElementById("voters").innerText = '0';
            // document.getElementById('revealBtn').setAttribute('disabled', true);

            document.getElementById('resetBtn').setAttribute('disabled', true); // Butonu aktif hale getir

            let voteButtons = document.querySelectorAll('.vote-btn');
            voteButtons.forEach(button => {
                button.classList.remove('active');
            });

        });

        // Toggle vote function - allows deselecting
        function toggleVote(e, vote) {
            const btn = e.target;
            const isActive = btn.classList.contains('active');

            // Remove active from all vote buttons
            let voteButtons = document.querySelectorAll('.vote-btn');
            voteButtons.forEach(button => {
                button.classList.remove('active');
            });

            if (isActive) {
                // Deselect - send null vote
                socket.emit('vote', { vote: null, room: currentRoom });
            } else {
                // Select new vote
                btn.classList.add('active');
                socket.emit('vote', { vote: vote, room: currentRoom });
            }
        }

        function showVotes() {
            socket.emit('showVotes', currentRoom);
            document.getElementById('resetBtn').removeAttribute('disabled'); // Butonu aktif hale getir
        }

        function resetVotes() {
            document.getElementById('resetBtn').setAttribute('disabled', true); // Butonu aktif hale getir

            let voteButtons = document.querySelectorAll('.vote-btn');
            voteButtons.forEach(button => {
                button.classList.remove('active');
            });

            socket.emit('resetVotes', currentRoom);


        }

        // Break request toggle
        function toggleBreakRequest() {
            const btn = document.getElementById('breakRequestBtn');
            const isActive = btn.classList.contains('active');

            if (isActive) {
                btn.classList.remove('active');
                socket.emit('breakRequest', { room: currentRoom, requestBreak: false });
            } else {
                btn.classList.add('active');
                socket.emit('breakRequest', { room: currentRoom, requestBreak: true });
            }
        }

        // Question toggle
        function toggleQuestion() {
            const btn = document.getElementById('questionBtn');
            const isActive = btn.classList.contains('active');

            if (isActive) {
                btn.classList.remove('active');
                socket.emit('question', { room: currentRoom, hasQuestion: false });
            } else {
                btn.classList.add('active');
                socket.emit('question', { room: currentRoom, hasQuestion: true });
            }
        }


        // Manuel pulse mekanizması kaldırıldı
        // Socket.io'nun kendi ping/pong mekanizması yeterli

    </script>


</head>

<body>

    <div
        class="join-section"
        id="joinSection"
    >
        <div>

            <label for="username">Name:</label>
            <input
                type="text"
                id="username"
                required
            >
        </div>
        <div>

            <label for="room">Room:</label>
            <input
                type="text"
                id="room"
                value="ecm"
                required
            >
        </div>

        <div>

            <label for="isMaster">Scrum Master:</label>
            <input
                type="checkbox"
                id="isMaster"
            >
        </div>

        <div class="recommended-rooms-container">
            <label>Recommended Rooms:</label>
            <button class="room-chip" onclick="selectRoom('ECM-Gryffindor')">ECM-Gryffindor</button>
            <button class="room-chip" onclick="selectRoom('ECM-Hufflepuff')">ECM-Hufflepuff</button>
        </div>

        <button
            onclick="joinRoom()"
            style="width: 100px;"
        >Join Room</button>
    </div>

    <!-- What's New Button -->
    <button class="whats-new-button" id="whatsNewButton" onclick="toggleWhatsNew()">
        ✨ What's New?
    </button>

    <!-- What's New Modal -->
    <div class="whats-new-modal" id="whatsNewModal">
        <div class="whats-new-modal-content">
            <div class="whats-new-modal-header">
                <h2 class="whats-new-title">What's New? ✨</h2>
                <button class="close-modal" onclick="toggleWhatsNew()">&times;</button>
            </div>
            <ul class="whats-new-list">
                <li>🟢 Real-time connection monitoring with status indicators</li>
                <li>⏰ Session persistence with 6-hour grace period for auto-reconnection</li>
                <li>☕ Request breaks or signal questions during estimation</li>
                <li>🎯 Flexible voting: change or remove your vote anytime</li>
                <li>👑 Enhanced Scrum Master controls for session management</li>
            </ul>
        </div>
    </div>

    <div
        id="connectionStatus"
        class="status-connected d-none"
    >
        🟢 Connected
    </div>

    <div
        id="countInfo"
        class="d-none"
    >
        <div
            id="userCount"
            style="margin: 10px 0px;"
        >Participants: 0</div>

        <!-- <div style="margin: 10px 0px;">Average of Votes: <span id="averageVote">-</span></div> -->

        <div style="margin: 10px 0px;">Voters: <span id="voters">0</span></div>
    </div>

    <hr>

    <div
        id="gameSection"
        class="game-section d-none"
    >
        <div class="voting-controls">
            <div class="vote-buttons-left">
                <button class="vote-btn" onclick="toggleVote(event, 0)">0</button>
                <button class="vote-btn" onclick="toggleVote(event, 1)">1</button>
                <button class="vote-btn" onclick="toggleVote(event, 2)">2</button>
                <button class="vote-btn" onclick="toggleVote(event, 3)">3</button>
                <button class="vote-btn" onclick="toggleVote(event, 5)">5</button>
                <button class="vote-btn" onclick="toggleVote(event, 8)">8</button>
                <button class="vote-btn" onclick="toggleVote(event, 13)">13</button>
                <button class="vote-btn" onclick="toggleVote(event, 21)">21</button>
                <button class="vote-btn" onclick="toggleVote(event, 40)">40</button>
                <span style="margin-left: 10px;">|</span>
                <button class="vote-btn" onclick="toggleVote(event, 'coffee ☕')">coffee ☕</button>
            </div>
            <div class="request-buttons-right">
                <button id="breakRequestBtn" class="request-btn break-btn" onclick="toggleBreakRequest()">
                    ☕ Request Break
                </button>
                <button id="questionBtn" class="request-btn question-btn" onclick="toggleQuestion()">
                    ❓ Ask Question
                </button>
            </div>
        </div>
        <hr>

        <div class="section-master d-none">
            <button
                id="revealBtn"
                onclick="showVotes()"
                style="display: none;"
            >Reveal Votes</button>

            <button
                id="resetBtn"
                onclick="resetVotes()"
                style="display: none;"
                disabled
            >Restart</button>
        </div>



        <div id="userContainer">
            <div
                class="users"
                id="users"
            ></div>
        </div>


    </div>

</body>

</html>